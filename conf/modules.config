/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'STARAMR_SEARCH' {
        def pointfinder_databases = ['salmonella', 'campylobacter', 'enterococcus_faecalis',
                                    'enterococcus_faecium', 'escherichia_coli', 'helicobacter_pylori']
        def plasmidfinder_databases = ['gram_positive', 'enterobacteriaceae']
        // Too many MLST schemes to list here!

        ext.args = {
            [
                pointfinder_database && pointfinder_databases.contains(pointfinder_database) 
                    ? "--pointfinder-organism ${pointfinder_database} " : '',
                plasmidfinder_database && plasmidfinder_databases.contains(plasmidfinder_database) 
                    ? "--plasmidfinder-database-type ${plasmidfinder_database} " : '',
                mlst_scheme
                    ? "--mlst-scheme ${mlst_scheme} " : '',
            ].join(' ')
        }
    }

}
