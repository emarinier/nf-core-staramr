/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: STARAMR_SEARCH {

        // A list of all supported Plasmidfinder databases:
        def plasmidfinder_databases = ['gram_positive', 'enterobacteriaceae']

        // A list of all supported Pointfinder databases:
        def pointfinder_databases = ['salmonella', 'campylobacter', 'enterococcus_faecalis',
                                    'enterococcus_faecium', 'escherichia_coli', 'helicobacter_pylori']

        // Convert the species name to a Pointfinder database-style name:
        def convert = {String species_name -> species_name.trim().toLowerCase().replaceAll(" ", "_")}

        // Create the command line arguments:
        def point_db_arg = {String database -> " --pointfinder-organism ${database} " }
        def plasmid_db_arg = {String database -> " --plasmidfinder-database-type ${database} " }
        def mlst_arg = {String scheme -> " --mlst-scheme ${scheme} " }

        // Check to see if the database name is valid:
        def valid_point_db = {String database -> pointfinder_databases.contains(database)}
        def valid_plasmid_db = {String database -> plasmidfinder_databases.contains(database)}

        ext.args = {
            [
                // Pointfinder database:
                params.pointfinder_database && valid_point_db(params.pointfinder_database) ?
                       point_db_arg(params.pointfinder_database) :
                       meta.species && valid_point_db(convert(meta.species)) ?
                           point_db_arg(convert(meta.species)) : "",
                
                // Plasmidfidner database:
                params.plasmidfinder_database && valid_plasmid_db(params.plasmidfinder_database) 
                    ? plasmid_db_arg(params.plasmidfinder_database) : "",
                
                // MLST scheme:
                params.mlst_scheme
                    ? mlst_arg(params.mlst_scheme) : ""
            ].join(" ")
        }
    }
}