nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("Should run without failures") {

        when {
            params {
                input = "$baseDir/tests/assets/test_samplesheet.csv"
                outdir = "$baseDir/tests/results"
            }
        }

        then {
            assert workflow.success
            assert path("$baseDir/tests/results").exists()

            // compare IRIDA Next JSON output
            assert path("$baseDir/tests/results/iridanext.output.json").exists()
            def iridanext_json = path("$baseDir/tests/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            // Salmonella tests
            def salmonella_metadata = iridanext_metadata.GCA_000008105
            assert salmonella_metadata."Quality Module" == "Passed"
            assert salmonella_metadata."Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, amoxicillin/clavulanic acid, cefoxitin, ceftriaxone, chloramphenicol, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"
            assert salmonella_metadata."CGE Predicted Phenotype" == "Spectinomycin, Streptomycin, Neomycin, Kanamycin, Lividomycin, Paromomycin, Ribostamycin, Amoxicillin, Amoxicillin+Clavulanic acid, Ampicillin, Ampicillin+Clavulanic acid, Cefotaxime, Cefoxitin, Ceftazidime, Piperacillin, Piperacillin+Tazobactam, Ticarcillin, Ticarcillin+Clavulanic acid, Cephalothin, Chloramphenicol, Trimethoprim, Nalidixic acid, Ciprofloxacin, Benzylkonium Chloride, Ethidium Bromide, Chlorhexidine, Cetylpyridinium Chloride, Sulfamethoxazole, Doxycycline, Tetracycline"
            assert salmonella_metadata."Genotype" == "aadA1, aadA2, aadA2, aph(3'')-Ib, aph(3')-Ia, blaCMY-2, blaTEM-1B, cmlA1, dfrA12, gyrA (D87N), gyrA (S83F), qacE, sul1, sul3, tet(A)"
            assert salmonella_metadata."Plasmid" == "IncFIB(K), IncFIB(S), IncFII(S)"
            assert salmonella_metadata."Scheme" == "senterica_achtman_2"
            assert salmonella_metadata."Sequence Type" == "66"
            // Listeria tests
            def listeria_metadata = iridanext_metadata.GCF_000196035
            assert listeria_metadata."Quality Module" == "Failed"
            assert listeria_metadata."Predicted Phenotype" == "fosfomycin"
            assert listeria_metadata."CGE Predicted Phenotype" == "Fosfomycin"
            assert listeria_metadata."Genotype" == "fosX"
            assert listeria_metadata."Plasmid" == "None"
            assert listeria_metadata."Scheme" == "listeria_2"
            assert listeria_metadata."Sequence Type" == "35"
            // E coli tests
            def ecoli_metadata = iridanext_metadata.GCA_000947975
            assert ecoli_metadata."Quality Module" == "Passed"
            assert ecoli_metadata."Predicted Phenotype" == "streptomycin, kanamycin, ampicillin, ceftriaxone, trimethoprim, ciprofloxacin I/R, nalidixic acid, unknown[qacE_1_X68232], sulfisoxazole, tetracycline"
            assert ecoli_metadata."CGE Predicted Phenotype" == "Streptomycin, Amoxicillin, Ampicillin, Aztreonam, Cefepime, Cefotaxime, Ceftazidime, Ceftriaxone, Piperacillin, Ticarcillin, Cephalothin, Trimethoprim, Nalidixic acid, Ciprofloxacin, Benzylkonium Chloride, Ethidium Bromide, Chlorhexidine, Cetylpyridinium Chloride, Sulfamethoxazole, Doxycycline, Tetracycline"
            assert ecoli_metadata."Genotype" == "aph(3'')-Ib, aph(6)-Id, blaCTX-M-15, blaTEM-1B, dfrA7, gyrA (S83A), qacE, sul1, sul2, tet(A)"
            assert ecoli_metadata."Plasmid" == "IncQ1"
            assert ecoli_metadata."Scheme" == "ecoli_achtman_4"
            assert ecoli_metadata."Sequence Type" == "678"

            // Check the commandline parameters
            // Salmonella
            assert path("$baseDir/tests/results/staramr/GCA_000008105_results/GCA_000008105_settings.txt").exists()
            def salmonella_settings = new File("$baseDir/tests/results/staramr/GCA_000008105_results/GCA_000008105_settings.txt")
            def salmonella_cmd = salmonella_settings.readLines().get(0)
            assert salmonella_cmd == "command_line                  = /usr/local/bin/staramr search --pointfinder-organism salmonella --minimum-contig-length 300 --genome-size-lower-bound 4000000 --genome-size-upper-bound 6000000 --minimum-N50-value 10000 --minimum-contig-length 300 --unacceptable-number-contigs 1000 --pid-threshold 98 --percent-length-overlap-plasmidfinder 60 --percent-length-overlap-resfinder 60 --percent-length-overlap-pointfinder 95 --nprocs 1 -o GCA_000008105_results GCA_000008105.fasta"

            // Ecoli
            assert path("$baseDir/tests/results/staramr/GCA_000947975_results/GCA_000947975_settings.txt").exists()
            def ecoli_settings = new File("$baseDir/tests/results/staramr/GCA_000947975_results/GCA_000947975_settings.txt")
            def ecoli_cmd = ecoli_settings.readLines().get(0)
            assert ecoli_cmd == "command_line                  = /usr/local/bin/staramr search --pointfinder-organism escherichia_coli --minimum-contig-length 300 --genome-size-lower-bound 4000000 --genome-size-upper-bound 6000000 --minimum-N50-value 10000 --minimum-contig-length 300 --unacceptable-number-contigs 1000 --pid-threshold 98 --percent-length-overlap-plasmidfinder 60 --percent-length-overlap-resfinder 60 --percent-length-overlap-pointfinder 95 --nprocs 1 -o GCA_000947975_results GCA_000947975.fasta"

            // Listeria
            assert path("$baseDir/tests/results/staramr/GCF_000196035_results/GCF_000196035_settings.txt").exists()
            def listeria_settings = new File("$baseDir/tests/results/staramr/GCF_000196035_results/GCF_000196035_settings.txt")
            def listeria_cmd = listeria_settings.readLines().get(0)
            assert listeria_cmd == "command_line                  = /usr/local/bin/staramr search --minimum-contig-length 300 --genome-size-lower-bound 4000000 --genome-size-upper-bound 6000000 --minimum-N50-value 10000 --minimum-contig-length 300 --unacceptable-number-contigs 1000 --pid-threshold 98 --percent-length-overlap-plasmidfinder 60 --percent-length-overlap-resfinder 60 --percent-length-overlap-pointfinder 95 --nprocs 1 -o GCF_000196035_results GCF_000196035.fasta"

            // Check CSVTK_concat output (merged_*) files

            // merged_detailed_summary.tsv
            def actual_detailed_summary_tsv = path("$baseDir/tests/results/csvtk/merged_detailed_summary.tsv")
            def expected_detailed_summary_tsv = path("$baseDir/tests/data/merged_detailed_summary.tsv")
            assert actual_detailed_summary_tsv.readLines().sort() == expected_detailed_summary_tsv.readLines().sort()

            // merged_mlst.tsv
            def actual_mlst_tsv = path("$baseDir/tests/results/csvtk/merged_mlst.tsv")
            def expected_mlst_tsv = path("$baseDir/tests/data/merged_mlst.tsv")
            assert actual_mlst_tsv.readLines().sort() == expected_mlst_tsv.readLines().sort()

            // merged_plasmidfinder.tsv
            def actual_plasmidfinder_tsv = path("$baseDir/tests/results/csvtk/merged_plasmidfinder.tsv")
            def expected_plasmidfinder_tsv = path("$baseDir/tests/data/merged_plasmidfinder.tsv")
            assert actual_plasmidfinder_tsv.readLines().sort() == expected_plasmidfinder_tsv.readLines().sort()

            // merged_pointfinder.tsv
            def actual_pointfinder_tsv = path("$baseDir/tests/results/csvtk/merged_pointfinder.tsv")
            def expected_pointfinder_tsv = path("$baseDir/tests/data/merged_pointfinder.tsv")
            assert actual_pointfinder_tsv.readLines().sort() == expected_pointfinder_tsv.readLines().sort()

            // merged_resfinder.tsv
            def actual_resfinder_tsv = path("$baseDir/tests/results/csvtk/merged_resfinder.tsv")
            def expected_resfinder_tsv = path("$baseDir/tests/data/merged_resfinder.tsv")
            assert actual_resfinder_tsv.readLines().sort() == expected_resfinder_tsv.readLines().sort()

            // merged_summary.tsv
            def actual_summary_tsv = path("$baseDir/tests/results/csvtk/merged_summary.tsv")
            def expected_summary_tsv = path("$baseDir/tests/data/merged_summary.tsv")
            assert actual_summary_tsv.readLines().sort() == expected_summary_tsv.readLines().sort()
        }

    }

}
