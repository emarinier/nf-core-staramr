/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: STARAMR_SEARCH {

        // A list of all supported Plasmidfinder databases:
        def plasmidfinder_databases = ['gram_positive', 'enterobacteriaceae']

        // A list of all supported Pointfinder databases:
        def pointfinder_databases = ['salmonella', 'campylobacter', 'enterococcus_faecalis',
                                    'enterococcus_faecium', 'escherichia_coli', 'helicobacter_pylori']

        // Convert the species name to a Pointfinder database-style name:
        def species_code = "[sS]almonella|[cC]amplyobacter|[eE]nterococcus.faecalis|[eE]nterococcus.faecium|[eE]scherichia.coli|[hH]elicobacter.pylori"
        def convert = {String species_name -> species_name.trim().toLowerCase().replaceAll(" ", "_").find(species_code)}

        // Create the command line arguments:
        def point_db_arg = {String database -> " --pointfinder-organism ${database} " }
        def plasmid_db_arg = {String database -> " --plasmidfinder-database-type ${database} " }
        def mlst_arg = {String scheme -> " --mlst-scheme ${scheme} " }
        def minimum_contig_length_arg = {String min_length -> " --minimum-contig-length ${min_length} "}
        def genome_size_lower_bound_arg = {String min_genome -> " --genome-size-lower-bound ${min_genome} "}
        def genome_size_upper_bound_arg = {String max_genome -> " --genome-size-upper-bound ${max_genome} "}
        def minimum_N50_value_arg = {String min_n50 -> " --minimum-N50-value ${min_n50} "}
        def unacceptable_number_contigs_arg = {String min_length -> " --unacceptable-number-contigs ${min_length} "}
        def pid_threshold_arg = {String min_pid -> " --pid-threshold ${min_pid} "}
        def percent_length_overlap_plasmidfinder_arg = {String min_overlap -> " --percent-length-overlap-plasmidfinder ${min_overlap} "}
        def percent_length_overlap_resfinder_arg = {String min_overlap -> " --percent-length-overlap-resfinder ${min_overlap} "}
        def percent_length_overlap_pointfinder_arg = {String min_overlap -> " --percent-length-overlap-pointfinder ${min_overlap} "}
        def no_exclude_genes_arg = " --no-exclude-genes"
        def exclude_negatives_arg = " --exclude-negatives"
        def exclude_resistance_phenotypes_arg = " --exclude-resistance-phenotypes"

        // Check to see if the database name is valid:
        def valid_point_db = {String database -> pointfinder_databases.contains(database)}
        def valid_plasmid_db = {String database -> plasmidfinder_databases.contains(database)}

        ext.args = {
            [
                // Pointfinder database:
                params.pointfinder_database && valid_point_db(convert(params.pointfinder_database)) ?
                    point_db_arg(convert(params.pointfinder_database)) :
                        meta.species && valid_point_db(convert(meta.species)) ?
                            point_db_arg(convert(meta.species)) : "",

                // Plasmidfidner database:
                params.plasmidfinder_database && valid_plasmid_db(params.plasmidfinder_database)
                    ? plasmid_db_arg(params.plasmidfinder_database) : "",

                // MLST scheme:
                params.mlst_scheme && (params.mlst_scheme != "Automatic")
                    ? mlst_arg(params.mlst_scheme) : "",

                // Additional parameters
                params.minimum_contig_length
                    ? minimum_contig_length_arg(params.minimum_contig_length.toString()) : "",

                params.genome_size_lower_bound
                    ? genome_size_lower_bound_arg(params.genome_size_lower_bound.toString()) : "",

                params.genome_size_upper_bound
                    ? genome_size_upper_bound_arg(params.genome_size_upper_bound.toString()) : "",

                params.minimum_N50_value
                    ? minimum_N50_value_arg(params.minimum_N50_value.toString()) : "",

                params.minimum_contig_length
                    ? minimum_contig_length_arg(params.minimum_contig_length.toString()) : "",

                params.unacceptable_number_contigs
                    ? unacceptable_number_contigs_arg(params.unacceptable_number_contigs.toString()) : "",

                params.pid_threshold
                    ? pid_threshold_arg(params.pid_threshold.toString()) : "",

                params.percent_length_overlap_plasmidfinder
                    ? percent_length_overlap_plasmidfinder_arg(params.percent_length_overlap_plasmidfinder.toString()) : "",

                params.percent_length_overlap_resfinder
                    ? percent_length_overlap_resfinder_arg(params.percent_length_overlap_resfinder.toString()) : "",

                params.percent_length_overlap_pointfinder
                    ? percent_length_overlap_pointfinder_arg(params.percent_length_overlap_pointfinder.toString()) : "",

                params.no_exclude_genes
                    ? no_exclude_genes_arg : "",

                params.exclude_negatives
                    ? exclude_negatives_arg : "",

                params.exclude_resistance_phenotypes
                    ? exclude_resistance_phenotypes_arg : ""
            ].join(" ")
        }
    }
}
